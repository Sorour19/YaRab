{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1KmJ_4wG39enHfY6Jx0TaAYaSEA6mSlMz",
      "authorship_tag": "ABX9TyMNS+N9UYuxkeEhiERU76Wm",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Sorour19/YaRab/blob/main/EHHHHHHHHHH.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import spacy\n",
        "import scispacy\n",
        "import en_ner_bc5cdr_md\n",
        "import pandas as pd\n",
        "import re\n",
        "nlp=spacy.load('en_ner_bc5cdr_md')\n",
        "nlp_spacy=spacy.load('en_core_web_sm')"
      ],
      "metadata": {
        "id": "YLHwHDm37hC7"
      },
      "execution_count": 63,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset=pd.read_csv('/content/medications.csv')\n",
        "dataset.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 276
        },
        "id": "qYhUlOjQ7ssM",
        "outputId": "0c30e057-f048-4764-fe47-ca47b9df2e7d"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                            START        STOP  \\\n",
              "0  ASDJNASFHWEUITRH43R43509453583         NaN   \n",
              "1                      1988-09-05         NaN   \n",
              "2                      2007-06-04  2008-06-04   \n",
              "3                      2009-01-11  2009-01-21   \n",
              "4                      2010-06-04  2011-06-04   \n",
              "\n",
              "                                PATIENT                             ENCOUNTER  \\\n",
              "0                                   NaN                                   NaN   \n",
              "1  71949668-1c2e-43ae-ab0a-64654608defb  5114a5b4-64b8-47b2-82a6-0ce24aae0943   \n",
              "2  71949668-1c2e-43ae-ab0a-64654608defb  5114a5b4-64b8-47b2-82a6-0ce24aae0943   \n",
              "3  71949668-1c2e-43ae-ab0a-64654608defb  4d451e22-a354-40c9-8b33-b6126158666d   \n",
              "4  71949668-1c2e-43ae-ab0a-64654608defb  f45c623f-a5e7-47a0-8cce-cfe19d16c47a   \n",
              "\n",
              "        CODE                                        DESCRIPTION  REASONCODE  \\\n",
              "0        NaN                                                NaN         NaN   \n",
              "1   834060.0                      Penicillin V Potassium 250 MG  43878008.0   \n",
              "2  1367439.0  NuvaRing 0.12/0.015 MG per 24HR 21 Day Vaginal...         NaN   \n",
              "3   608680.0                               Acetaminophen 160 MG  10509002.0   \n",
              "4   748879.0                         Levora 0.15/30 28 Day Pack         NaN   \n",
              "\n",
              "                      REASONDESCRIPTION  \n",
              "0                                   NaN  \n",
              "1  Streptococcal sore throat (disorder)  \n",
              "2                                   NaN  \n",
              "3           Acute bronchitis (disorder)  \n",
              "4                                   NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2a4cdf25-a099-42ac-8762-0967f3b31bd4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>START</th>\n",
              "      <th>STOP</th>\n",
              "      <th>PATIENT</th>\n",
              "      <th>ENCOUNTER</th>\n",
              "      <th>CODE</th>\n",
              "      <th>DESCRIPTION</th>\n",
              "      <th>REASONCODE</th>\n",
              "      <th>REASONDESCRIPTION</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ASDJNASFHWEUITRH43R43509453583</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1988-09-05</td>\n",
              "      <td>NaN</td>\n",
              "      <td>71949668-1c2e-43ae-ab0a-64654608defb</td>\n",
              "      <td>5114a5b4-64b8-47b2-82a6-0ce24aae0943</td>\n",
              "      <td>834060.0</td>\n",
              "      <td>Penicillin V Potassium 250 MG</td>\n",
              "      <td>43878008.0</td>\n",
              "      <td>Streptococcal sore throat (disorder)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2007-06-04</td>\n",
              "      <td>2008-06-04</td>\n",
              "      <td>71949668-1c2e-43ae-ab0a-64654608defb</td>\n",
              "      <td>5114a5b4-64b8-47b2-82a6-0ce24aae0943</td>\n",
              "      <td>1367439.0</td>\n",
              "      <td>NuvaRing 0.12/0.015 MG per 24HR 21 Day Vaginal...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2009-01-11</td>\n",
              "      <td>2009-01-21</td>\n",
              "      <td>71949668-1c2e-43ae-ab0a-64654608defb</td>\n",
              "      <td>4d451e22-a354-40c9-8b33-b6126158666d</td>\n",
              "      <td>608680.0</td>\n",
              "      <td>Acetaminophen 160 MG</td>\n",
              "      <td>10509002.0</td>\n",
              "      <td>Acute bronchitis (disorder)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2010-06-04</td>\n",
              "      <td>2011-06-04</td>\n",
              "      <td>71949668-1c2e-43ae-ab0a-64654608defb</td>\n",
              "      <td>f45c623f-a5e7-47a0-8cce-cfe19d16c47a</td>\n",
              "      <td>748879.0</td>\n",
              "      <td>Levora 0.15/30 28 Day Pack</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2a4cdf25-a099-42ac-8762-0967f3b31bd4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2a4cdf25-a099-42ac-8762-0967f3b31bd4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2a4cdf25-a099-42ac-8762-0967f3b31bd4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-f1cbd5e5-3c17-4b11-92ca-e6ed11caad7e\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f1cbd5e5-3c17-4b11-92ca-e6ed11caad7e')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-f1cbd5e5-3c17-4b11-92ca-e6ed11caad7e button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dataset",
              "summary": "{\n  \"name\": \"dataset\",\n  \"rows\": 6049,\n  \"fields\": [\n    {\n      \"column\": \"START\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3968,\n        \"samples\": [\n          \"2012-07-25\",\n          \"1988-06-27\",\n          \"1994-03-19\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STOP\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1925-02-04 00:00:00\",\n        \"max\": \"2017-10-30 00:00:00\",\n        \"num_unique_values\": 2053,\n        \"samples\": [\n          \"2008-09-16\",\n          \"2008-04-26\",\n          \"2009-07-17\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PATIENT\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1318,\n        \"samples\": [\n          \"6e3a29fb-706f-4d39-99d1-dbe447c9642e\",\n          \"063df653-8a3a-4f2d-b86d-3e82f20fc29a\",\n          \"eb884e68-a03c-416f-9bbb-0d5651a6caaf\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ENCOUNTER\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3716,\n        \"samples\": [\n          \"8850d3dd-4936-447d-94ba-34171347321f\",\n          \"6ceda62f-75cb-472b-94f3-b1e8fe12245b\",\n          \"1e5f6297-5394-4f3f-9152-ebf81bb15220\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CODE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 360054.77414180373,\n        \"min\": 106258.0,\n        \"max\": 1856546.0,\n        \"num_unique_values\": 96,\n        \"samples\": [\n          749762.0,\n          563026.0,\n          1310197.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DESCRIPTION\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 97,\n        \"samples\": [\n          \"Donepezil hydrochloride 10 MG [Aricept]\",\n          \"3 ML liraglutide 6 MG/ML Pen Injector\",\n          \"Kyleena 19.5 MG Intrauterine System\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"REASONCODE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11375583450698.518,\n        \"min\": 10509002.0,\n        \"max\": 67841000119103.0,\n        \"num_unique_values\": 36,\n        \"samples\": [\n          422968005.0,\n          363406005.0,\n          69896004.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"REASONDESCRIPTION\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 36,\n        \"samples\": [\n          \"Non-small cell carcinoma of lung  TNM stage 3 (disorder)\",\n          \"Malignant tumor of colon\",\n          \"Rheumatoid arthritis\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "32534139"
      },
      "source": [
        "\n",
        "medical_labels_to_preserve = ['DISEASE', 'DRUG', 'FORMULA', 'MEDICAL_CONDITION', 'CHEMICAL'] =\n",
        "for index, row in dataset.iterrows():\n",
        "    description_text = str(row['DESCRIPTION'])\n",
        "    reason_desciption_text = str(row['REASONDESCRIPTION'])\n",
        "\n",
        "    doc_description = nlp(description_text)\n",
        "    entities_description = [(ent.text, ent.label_) for ent in doc_description.ents]\n",
        "\n",
        "    doc_reason_description = nlp(reason_description_text)\n",
        "    entities_reason_description = [(ent.text, ent.label_) for ent in doc_reason_description.ents]\n",
        "\n",
        "    all_entities = entities_description + entities_reason_description\n",
        "    cleaned_formatted_entities = []\n",
        "    for text, label in all_entities:\n",
        "        if label in medical_labels_to_preserve:\n",
        "            cleaned_text = text\n",
        "        else:\n",
        "            lower_text = text.lower()\n",
        "            text_with_8s = re.sub(r'\\d', '8', lower_text)\n",
        "            cleaned_text = re.sub(r'[^a-z8\\s]', '', text_with_8s)\n",
        "\n",
        "        cleaned_formatted_entities.append(f\"{cleaned_text} ({label})\")\n",
        "\n",
        "    if cleaned_formatted_entities:\n",
        "        print(cleaned_formatted_entities)\n",
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "medical_labels_to_preserve = ['DISEASE', 'DRUG', 'FORMULA', 'MEDICAL_CONDITION', 'CHEMICAL']\n",
        "non_medical_columns_to_process = ['START', 'STOP', 'PATIENT', 'ENCOUNTER', 'CODE', 'REASONCODE']\n",
        "\n",
        "for index, row in dataset.iterrows():\n",
        "    all_entities_spacy = []\n",
        "    for col_name in non_medical_columns_to_process:\n",
        "        text_to_process = str(row[col_name])\n",
        "        doc = nlp_spacy(text_to_process)\n",
        "\n",
        "        entities_in_column = [(ent.text, ent.label_) for ent in doc.ents]\n",
        "        all_entities_spacy.extend(entities_in_column)\n",
        "\n",
        "    cleaned_entities = []\n",
        "    for text,label in all_entities_spacy:\n",
        "        if label in medical_labels_to_preserve:\n",
        "            cleaned_text = text\n",
        "        else:\n",
        "            lower_text_spacy = text.lower()\n",
        "            text_with_8 = re.sub(r'\\d', '8', lower_text_spacy)\n",
        "            cleaned_text_spacy = re.sub(r'[^a-z8\\s]', '', text_with_8)\n",
        "            cleaned_entities.append(f\"{cleaned_text_spacy} ({label})\")\n",
        "\n",
        "    if cleaned_entities:\n",
        "\n",
        "        formatted_entities = \" \".join(cleaned_entities)\n",
        "        print(formatted_entities)"
      ],
      "metadata": {
        "id": "EANhvK9ULdXC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "FRL2rVNMTKRH"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}